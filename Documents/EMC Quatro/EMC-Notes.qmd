---
title: "Emma Working Notes"
format: html
---

## Loading in the Data:

```{r}
#| output: false
##Packages!!====================================================================
library(tidyverse)
library(here)

#the files======================================================================
drone=read_csv(here::here("data/raw/Universal Project Data/uasdata.csv"))
ocean=read_csv(here::here("data/raw/Universal Project Data/oce.indices.csv"))
procedure=read_csv(here::here("data/raw/ESEAL_FORAGING_2024_REVISED.v2.csv"))

skimr::skim(drone)
skimr::skim(ocean)
skimr::skim(procedure)
```

#### [Some things to note!!]{.underline}

-   units are not always the same between procedure data and drone data

    -   ex- SL is in cm, polygon length appears to be in m

-   time frames are different (procedure=2004-2024, drone=20216-2025)

-   drone data includes male and pup classes, procedure data appears to include only females

## Drone-Only Exploratory Figures

### In-Class Plot: Length/Width

```{r}
basic=ggplot(data=drone, mapping = aes(x = width , y = length))+
  geom_point(alpha=0.2, aes(color=class))+
  theme_bw()+
  scale_color_viridis_d()
basic
```

### cleaning variable classifications

```{r}
#lets change class and year to be factors for visualization purposes 
drone.cleanv1 <- drone %>%
  mutate(class.f = relevel(as.factor(class), 'male', 'female', 'pup' ), 
         year.f = relevel(as.factor(year), '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025'))

#save changes as a new csv
#write_csv(drone.cleanv1,"/data/cleaned/uascleanv1.csv" )
```

### Plot: Length Across Years

```{r}
#color palette 
classpalette = c(
  "male" = "#264653", 
  "female" = "#2a9d8f", 
  "pup" = "#9fe9e0")

#the plot 
fun=ggplot(data=drone.cleanv1, mapping = aes(x = year.f , y = length, color=class.f))+
  geom_point(alpha = 0.2, position = position_dodge(width = 0.7)) +
  #facet_grid(class.f~.,switch='y')+
  theme_bw()+
  scale_color_manual(values = classpalette)+
  labs(y= "Polygon Length (m)", x= "Year", color="Class")
fun
```

## Exploring Both Datasets

### The game-plan

-   want to merge all female-class data, and with a new column included called "collection.type"

    -   filter out years you don't need (2004-2015)

    -   use sep() function to split the years to year, month, day, and then split by months

-   Allison says: would be cool to eventually visualize when drone vs procedure happen(?) in terms of timing spread

-   Splitting the date: initial issues

    -   procedure dataset dates are split into deploy and recover dates, so there are two dates associated with each animal

    -   merging will potentially be a little fraught due to this, ask Allison for advice

-   Allison advice:

    -   Pivot(?) or otherwise mutate to make a column called "collection type" with "deploy", "recovery" and in procedure, and "drone" as the sole option in drone data, so that date can be consolidated into columns called "day" "month" and "year" and be cut via sep() a second time

### The code!

#### Splitting

-   The first section uses separate() to split date values, since they're written in yyyy-mm-dd formatting, and I use remove=false to keep the original date column instead of erasing it.

```{r}
#clean up: merged female dataset  ======================================================================
 #for comparisons/prediction work 

###splitting "date" into year/month/day columns ======================================================================
drone.2=drone.cleanv1 %>% 
  separate(date, into= c("year", "month", "day"),
           sep= "-", remove=FALSE)

procedure.2=procedure %>% 
  separate(DeployDate, into= c("DeployYear", "DeployMonth", "DeployDay"), 
           sep= "-", remove=FALSE) %>% 
  separate(RecoverDate, into= c("RecoverYear", "RecoverMonth", "RecoverDay"), 
           sep= "-", remove=FALSE)
```

#### Fixing Errors

-   I ran into some issues!

-   There are 2 data values that are in mm/dd/yy formatting in procedure.2, and wouldn't properly split and became "NA" in the new columns

    -   these are thankfully outside the date range for procedures that we will be using alongside drone.2, so we can cut them out entirely by cutting rows with "NA" in one of the new columns (I chose Deploy/Recover Years)

```{r}
####removing the wonky dates:  ======================================================================
procedure.2 <- procedure.2 %>%
  filter(!is.na(DeployYear), !is.na(RecoverYear))
```

#### Numerics

-   I noticed in a console skim of the new .2 datasets that my new dates were assigned as characters, which is NOT awesome for filtering- to help prevent future issues, I manually assigned each of the new split-date columns in both datasets to be numeric vectors in batches using mutate() and as.numeric()
    -   as.posixct() might work better

```{r}
###new date columns as numerics ======================================================================
#to fix filtering issues 

#as.numeric for drone
drone.2= drone.2 %>% 
  mutate(day = as.numeric(day), 
         month = as.numeric(month),
         year = as.numeric(year))
#as.numeric for procedure
procedure.2=procedure.2 %>% 
  mutate(DeployDay = as.numeric(DeployDay),
         RecoverDay = as.numeric(RecoverDay), 
         DeployMonth = as.numeric(DeployMonth),
         RecoverMonth = as.numeric(RecoverMonth), 
         DeployYear = as.numeric(DeployYear),
         RecoverYear = as.numeric(RecoverYear))
```

#### First-Round Filters: OR statements

-   This is some preliminary filtering I did to clean less data when I go to add my "collection type" columns. I'm filtering procedure data to have rows that have at least one date that is within the drone data ranges (2016-2025, and between January and March) I can always split down to the day later, but this gets us in a good "ballpark"

```{r}
###filtering procedure.2 data  ======================================================================
#to the correct year and month ranges to better fit drone.2

procedure.3=procedure.2 %>% 
  #if year is between 2016-2025 for deploy OR recover years, keep it 
  filter(between(DeployYear, 2016, 2025)| between(RecoverYear, 2016, 2025)) %>% 
  #if MONTH is between 1-3 for deploy OR recover months, keep it 
  filter(between(DeployMonth, 1, 3)|between(RecoverMonth, 1, 3))
```

#### More cleaning: "collection type" and date columns

In this section, I need to mutate collection type columns into drone.2 and procedure.3.

-   drone.2 is easy to mutate in since I can just mutate a new column with "drone" as the value

-   In order to do this in procedure.3 , I need to pivot my data first (I think) since right now everything is by field ID, with deploy and recover, but I want each row split in 2, and every seal will be defined across 2 rows (its recovery and its deployment)

    -   \^HELP!! I have no idea if pivot is the right function or how to approach splitting/formatting procedure.3

-   Allison says: split into 2 data frames, recovery and deploy, and then mutate columns in

```{r}
###pivoting procedure.3- one consolidated "date" ======================================================================
#splitting into new dataframes by collection type, renaming cleaning, and filtering properly 

deploy.1=procedure.3 %>% 
  dplyr::select(ID,TOPPID, DeployDate, DeployYear, DeployMonth, DeployDay, DeployMass, `Deploy SL`, DeployAdipose) %>% 
  rename(date=DeployDate, year=DeployYear, month=DeployMonth, day=DeployDay, 
         mass=DeployMass, std.length=`Deploy SL`, adipose=DeployAdipose) %>% 
  filter(between(year, 2016, 2025) & between(month, 1, 3)) %>% 
  mutate('collection type'= "deployment")

recover.1=procedure.3 %>% 
  dplyr::select(ID,TOPPID, RecoverDate, RecoverYear, RecoverMonth, RecoverDay, RecoverMass, `Recover SL`, RecoverAdipose ) %>% 
  rename(date=RecoverDate, year=RecoverYear, month=RecoverMonth, day=RecoverDay, 
         mass=RecoverMass, std.length=`Recover SL`, adipose=RecoverAdipose) %>%
  filter(between(year, 2016, 2025) & between(month, 1, 3)) %>%
  mutate('collection.type'= "recovery")

#cleaning drone data to filter to relevant information and follow a standard format 

drone.3=drone.2 %>% 
  dplyr::select(confidenc, date, year, month, day, class, length, width, area_m2,class.f, year.f) %>% 
  mutate(length=length*100) %>% 
  mutate('collection.type'= "drone")
```

-   TO-DO: add filter commands in recover/deploy to trim timing again

#### Modelling!

-   i want to run a model to see how strongly if drone standard length can predict procedure values, and the same for mass values

```         
-   need to calculate mass estimate per drone using footprint and length?

-   use the calculation from the Alvarado paper

    -   EstimatedMassDorsal = (255:43\*Footprint\^1.5) + 4.238 

        EstimatedMassLateral = (268:272\*Footprint\^1.5) + 4.125

-   plot estimate vs actual mass
```

-   can get away with gaussian linear model
